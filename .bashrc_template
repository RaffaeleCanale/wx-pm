#!/usr/bin/env bash

# If not running interactively, don't do anything
# case $- in
#     *i*) ;;
#       *) return;;
# esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

########## ALIASES ##########

#### Navigation
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd .. && cd ..'

#### Useful functions
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias compress='tar -zcvf'
alias ssize='du -kh -d 1 | sort -hr'
alias pbcopy='xclip -sel clip'
alias pbpaste='xclip -sel clip -o'

#### Misc.
alias which='type -a'
alias path='echo -e ${PATH//:/\\n}'
alias ssudo='sudo -E env "PATH=$PATH"'
alias dc='docker-compose'

#### Git
alias gitlog='git log --graph --abbrev-commit --decorate --date=relative'
alias gitloga='git log --graph --abbrev-commit --decorate --date=relative --all'

#### KDE
alias nrestart='systemctl restart network-manager.service'
alias fixkscreen='cd $HOME/.local/share/ && (rm -r kscreen.o; mv kscreen kscreen.o)'


########## FUNCTIONS ##########

#### Git
function gitacp() {
    # git-add-commit-push "message"
    if [ "$1" == "" ]; then
        echo "Enter a message please"
        return
    fi
    git add -A && git commit -m "$1" && git push
}

#### Search and replace
function tsearch() {
    # Search a string in files
    if [ $# -gt 1 ]; then
        local s="$1"
        shift
        grep "$s" "$@" -r
    else
        grep "$1" * -r
    fi
}
function tsearche() {
    # Search a string in files and open them in Atom
    if [ $# -gt 1 ]; then
        local s="$1"
        shift
        grep "$s" "$@" -r -l | xargs Atom
    else
        grep "$1" * -r -l | xargs Atom
    fi
}
function treplace() {
    # Replace all occurrences of a string in files
    test $# -lt 2 && echo "Usage: treplace <find> <replace> <files>" && return

    local f="$1"
    local r="$2"
    shift
    shift

    if [ $# -gt 2 ]; then
        grep -rl -F "$f" "$@" | xargs perl -pi -e "s|\Q$f\E|$r|g"
    else
        grep -rl -F "$f" * | xargs perl -pi -e "s|\Q$f\E|$r|g"
    fi
}

#### Misc.
function mk() {
    mkdir -p "$1" && cd "$1"
}
function sanitize() {
	for arg in "$@"; do
		mv "$arg" "$(echo "$arg" | sed 's/_/ /g' | sed 's/-/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' | sed 's/,/ /g')"
	done
}
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


########## COMMAND PROMPT ##########
_parse_git_branch() {
    /usr/bin/git rev-parse --abbrev-ref HEAD 2> /dev/null
}
_last_cmd_status() {
    if [ $? -eq 0 ]; then
        echo -e "\033[01;32m✔\033[0m"
    else
        echo -e "\033[01;31m❌\033[0m"
    fi
}
export PS1="\$(_last_cmd_status) \W\[\033[33m\] \$(_parse_git_branch)\[\033[00m\]\n> "


########## OTHER ##########
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
