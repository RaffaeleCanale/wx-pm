#!/bin/bash
function modulePrintHelp() {
	cat << EOF
        Install a project with a $CONFIG file present
EOF
}

function moduleRun() {
	if [ -f "$CONFIG" ] && hasConfig "env"; then
		getConfig env env
	else
		detectEnvironment
	fi

	loadEnv
	preInstall
	initConfig
	install
	postInstall
	setupBashCompletion
}

function postInstall() {
	if [ -f "$CONFIG" ] && hasConfig "postInstall"; then
		getConfig cmd postInstall
		info "Post-install: $cmd"
		(eval "$cmd")
	fi
}

function preInstall() {
	if [ -f "$CONFIG" ] && hasConfig "preInstall"; then
		getConfig cmd preInstall
		info "Pre-install: $cmd"
		(eval "$cmd")
	fi
}

function initConfig() {
	if [ -f "$CONFIG" ] && hasConfig "files"; then
        getConfig _files "files[].output"
		changeIFS
        files=($_files)
		resetIFS

        for file in "${files[@]}"; do
			_ensureExists "$file" || stop "Missing config file: $file"
        done
    fi
}

function _ensureExists() {
	local file="$1"
	local exampleFile="${file}.example"

	if [ -f "$file" ]; then
		return 0
	fi

	if [ -f "$exampleFile" ]; then
		if [[ "$file" == *.properties ]]; then
			createProperties "$file" "$exampleFile"
			return $?
		fi
	fi

	return 1
}

function detectEnvironment() {
	if [ -f "package.json" ]; then
		env="node"
	elif [ -f "$CONFIG" ]; then
		env="bash"
	else
		stop "Couldn't determine env"
	fi

	verbose "Detected env: $env"
}

function loadEnv() {
	info "Loading env: $env"
	installer="__ROOT__/utils/installers/$env"
	test -f "$installer" || stop "Installer not found for env: $env"

	source "$installer"
}

function setupBashCompletion() {
	name=`basename "$PWD"`
	if [ ! -f "$HOME/.bash_completion.d/$name" ]; then
		if lookupBashCompletion; then
			ln -s "$completion_file" "$HOME/.bash_completion.d/$name"
			chmod +x "$completion_file"
			verbose "Link bash_completion: $completion_file"
		fi
	fi
}

function lookupBashCompletion() {
	local files=(bash_completion .bash_completion dist/bash_completion dist/.bash_completion)

	for file in "${files[@]}"; do
		if [ -f "$file" ]; then
			completion_file="$PWD/$file"
			return 0
		fi
	done

	return 1
}

source "__ROOT__/utils/config/create"
