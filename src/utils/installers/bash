function install() {
    local src=`getConfigPath source src`
    local dist=`getConfigPath dist dist`

    test -d "$src" || error "Source not found"

    buildProperties "$dist"
    compile "$src" "$dist" "$properties"

    postInstall

    add_to_path "$dist"
}

function postInstall() {
    local cmd=`getConfig postInstall null`
    if [ "$cmd" != "null" ]; then
        (eval "$cmd")
    fi
}

function safeProp() {
    echo "__$1__"
}

function defaultProperties() {
    echo "`safeProp "ROOT"` = $1"
    echo "`safeProp "STARTER"` = $SCRIPTS_ROOT/utils/starter/scriptStarter"
}

function buildProperties() {
    local content=`defaultProperties "$1"`
    files=(`cat "$CONFIG" | jq -r '.files[].output'`)

    for file in "$files"; do
        if [[ "$file" == *.properties ]]; then
            contentCat=`cat "$file"`
            content="${content}\n${contentCat}"
        fi
    done

    createTmpFile properties
    echo -e "$content" > "$properties"
}

function compile() {
    local src="$1"
    local dst="$2"
    local properties="$3"

    safeMkdir "$dst"

    for file in "$src/"*; do
        local fileC="$dst/$(basename "$file")"
        if [ -d "$file" ]; then
            if [ "$(basename $file)" != "node_modules" ]; then
                compile "$file" "$fileC" "$properties"
            else
                cp -r "$file" "$fileC"
            fi
        else
            verboseR "$file"
            "__ROOT__/utils/compiler" "$file" "$fileC" "$properties"
        fi
    done
}

function add_to_path() {
	local dist="$1"
	local project_name=`basename $PWD`
	main=`getConfig "main" "$project_name"`
	main_file="$dist/$main"

	test -f "$main_file" || error "File $main_file not found"
    if [ ! -f "$WX_PATH/$main" ]; then
        ln -s "$main_file" "$WX_PATH/$main"
    fi
}
